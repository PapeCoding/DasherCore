// ColourIO.cpp
//
// Copyright (c) 2002 Iain Murray

#include "ColourIO.h"
#include <cstring>

using namespace Dasher;

// TODO: Share information with AlphIO class?
CColourIO::CColourIO(CMessageDisplay *pMsgs) : AbstractXMLParser(pMsgs) {
	CreateDefault();
}

void CColourIO::GetColours(std::vector<std::string>* ColourList) const {
	ColourList->clear();

	for(auto [ID, Palette] : KnownPaletts){
		ColourList->push_back(Palette.ColourID);
	}
}

const CColourIO::ColourInfo & CColourIO::GetInfo(const std::string &ColourID) {
	if(ColourID.empty()){ // return Default if no colour scheme is specified
		return KnownPaletts["Default"];
	}
	
	if(KnownPaletts.count(ColourID) != 0) {
		KnownPaletts[ColourID].ColourID = ColourID; // Ensure consistency
		return KnownPaletts[ColourID];
	}

	// if we don't have the colour scheme they asked for, return default
	return KnownPaletts["Default"];
}

bool CColourIO::Parse(pugi::xml_document& document, bool bUser)
{
	pugi::xml_node outer = document.child("colours");
	for (pugi::xml_node palette : outer)
    {
		if(std::strcmp(palette.name(), "palette") != 0) continue; // a non <palette ...> node

		ColourInfo NewPalette;
		NewPalette.Mutable = bUser;
		NewPalette.ColourID = palette.attribute("name").as_string();

		for (pugi::xml_node color : palette)
		{
			if(std::strcmp(color.name(), "colour") != 0) continue; // a non <colour ...> node

			NewPalette.Colors.push_back({
				color.attribute("r").as_int(),
				color.attribute("g").as_int(),
				color.attribute("b").as_int()
			});
		}

		KnownPaletts[NewPalette.ColourID] = NewPalette;
	}

	return true;
}

void CColourIO::CreateDefault() {
	ColourInfo DefaultPalette;
	DefaultPalette.ColourID = "Default";
	DefaultPalette.Mutable = false;

	DefaultPalette.Colors = {
		{255,255,255},
		{255,0,0},
		{0,0,0},
		{218,218,218},
		{0,0,0},
		{0,0,0},
		{0,0,0},
		{180,238,180},
		{80,80,80},
		{235,235,235},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{180,238,180},
		{155,205,155},
		{0,255,255},
		{255,0,0},
		{255,255,0},
		{0,200,0},
		{255,0,0},
		{255,255,0},
		{0,200,0},
		{255,0,0},
		{255,255,0},
		{0,200,0},
		{255,0,0},
		{255,255,0},
		{0,200,0},
		{255,0,0},
		{255,255,0},
		{0,200,0},
		{255,0,0},
		{255,255,0},
		{0,200,0},
		{255,0,0},
		{255,255,0},
		{0,0,0},
		{0,0,0},
		{0,0,0},
		{0,0,0},
		{0,0,0},
		{0,0,0},
		{0,0,0},
		{0,0,0},
		{80,80,80},
		{255,255,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{255,174,185},
		{255,187,255},
		{135,206,255},
		{0,255,0},
		{240,240,0},
		{255,0,0},
	};

	KnownPaletts["Default"] = DefaultPalette;
}
